<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>responsible-disclosure on James Hemmings ~ Blog</title>
    <link>https://jamesit.github.io/tags/responsible-disclosure/</link>
    <description>Recent content in responsible-disclosure on James Hemmings ~ Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(C) James Hemmings 2021, all rights reserved.</copyright>
    <lastBuildDate>Wed, 24 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://jamesit.github.io/tags/responsible-disclosure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EE 4GEE HH70 Router Vulnerability Disclosure</title>
      <link>https://jamesit.github.io/2018/10/24/ee-4gee-hh70-router-vulnerability-disclosure/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jamesit.github.io/2018/10/24/ee-4gee-hh70-router-vulnerability-disclosure/</guid>
      <description>After finding vulnerabilities in the 4GEE Mobile WiFi Router last year, I thought I would give my brand new EE home broadband router a run for it&amp;rsquo;s money and it seems like last time, it&amp;rsquo;s vulnerable to another attack vector, this time being hard-coded credentials for SSH root access, which luckily is only available via the LAN.
This would enable any user on the LAN to gain access to the router using these hard-coded credentials.</description>
    </item>
    
    <item>
      <title>EE 4GEE Mobile WiFi Router - Multiple Security Vulnerabilities Writeup</title>
      <link>https://jamesit.github.io/2017/08/24/ee-4gee-mobile-wifi-router-multiple-security-vulnerabilities-writeup/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesit.github.io/2017/08/24/ee-4gee-mobile-wifi-router-multiple-security-vulnerabilities-writeup/</guid>
      <description>After performing security testing on the 4GEE Mobile WiFi router it was discovered to be vulnerable to several security vulnerabilities. These vulnerabilities in combination make it possible for an attacker to remotely exploit the device, which can be achieved through having a user view a crafted texted message that was sent to him.
Other attacks are also possible by misleading and/or tricking users into executing code or clicking crafted URLs to trigger multiple functions such as device reset, device reboot, device restore (malicious config), sending SMS messages or stealing device configuration information, SMS messages and any other information on the device that a user may have access to and without authentication.</description>
    </item>
    
    <item>
      <title>Azure Cloud Root Keys (Insecure Storage) - Responsible Disclosure</title>
      <link>https://jamesit.github.io/2017/07/23/azure-cloud-root-keys-insecure-storage-responsible-disclosure/</link>
      <pubDate>Sun, 23 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesit.github.io/2017/07/23/azure-cloud-root-keys-insecure-storage-responsible-disclosure/</guid>
      <description>Back in February I found an Android application which is used by the emergency services, that had exposed Azure API keys within the application leading to potential compromise of sensitive incident reports, attachments, and infrastructure server &amp;ldquo;.vhd&amp;rdquo; files with the access level to spin up new instances or delete them. I immediately reported this to the application developer and it&amp;rsquo;s respective organisation under responsible disclosure, which resulted in an instant and prompt response, which I give huge kudos for.</description>
    </item>
    
    <item>
      <title>GoodSAM App - CSRF/Stored XSS Chain Full Disclosure</title>
      <link>https://jamesit.github.io/2017/07/17/goodsam-app-csrf/stored-xss-chain-full-disclosure/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesit.github.io/2017/07/17/goodsam-app-csrf/stored-xss-chain-full-disclosure/</guid>
      <description>I&amp;rsquo;ve been a user of the mobile/web application named &amp;ldquo;GoodSAM App&amp;rdquo; which is an application where the Ambulance service in London or the East Midlands can dispatch &amp;ldquo;Responders&amp;rdquo; who are trained in Basic Life Support (BLS) and can be dispatched to cardiac arrests or other priority calls and users at emergencies can also request a &amp;ldquo;Responder&amp;rdquo;. Now this application is absolutely brilliant in the nature of what it does and I fully support them.</description>
    </item>
    
    <item>
      <title>Major League Baseball Reflected XSS</title>
      <link>https://jamesit.github.io/2017/07/15/major-league-baseball-reflected-xss/</link>
      <pubDate>Sat, 15 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jamesit.github.io/2017/07/15/major-league-baseball-reflected-xss/</guid>
      <description>Recently I have been looking for vulnerabilities such as XSS/CSRF within online applications and came across an XSS vulnerability within the Major League Basketball (MLB) website, which in question was vulnerable to reflected XSS. I did attempt responsible disclosure through Open Bug Bounty [3] and attempted contact via Twitter also, with no response returned and hence full disclosure.
In particular, the website was vulnerable within the &amp;ldquo;FORM_CODE&amp;rdquo; parameter with the payload of &amp;ldquo;&amp;ndash;!</description>
    </item>
    
  </channel>
</rss>
